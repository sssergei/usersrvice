// Code generated by go-swagger; DO NOT EDIT.

package user_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UserServiceScheduleReminderHandlerFunc turns a function with the right signature into a user service schedule reminder handler
type UserServiceScheduleReminderHandlerFunc func(UserServiceScheduleReminderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserServiceScheduleReminderHandlerFunc) Handle(params UserServiceScheduleReminderParams) middleware.Responder {
	return fn(params)
}

// UserServiceScheduleReminderHandler interface for that can handle valid user service schedule reminder params
type UserServiceScheduleReminderHandler interface {
	Handle(UserServiceScheduleReminderParams) middleware.Responder
}

// NewUserServiceScheduleReminder creates a new http.Handler for the user service schedule reminder operation
func NewUserServiceScheduleReminder(ctx *middleware.Context, handler UserServiceScheduleReminderHandler) *UserServiceScheduleReminder {
	return &UserServiceScheduleReminder{Context: ctx, Handler: handler}
}

/* UserServiceScheduleReminder swagger:route PUT /v1/user/schedule UserService userServiceScheduleReminder

UserServiceScheduleReminder user service schedule reminder API

*/
type UserServiceScheduleReminder struct {
	Context *middleware.Context
	Handler UserServiceScheduleReminderHandler
}

func (o *UserServiceScheduleReminder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUserServiceScheduleReminderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
